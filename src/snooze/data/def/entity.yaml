Entity:
  Type: forge::Entity
  Includes:
    - forge/Project.h
    - forge/engine/ecs/Entity.h
    - forge/builtin/rendering/RenderableComponent.h
    - forge/builtin/3Cs/ScreenMappableComponent.h
    - snooze/data/SpriteCatalog.h
    - snooze/ecs/SnoozableComponent.h
    - snooze/ecs/HoverableComponent.h

  Data:
    - SnoozeButton:
        Size: [5.12, 2.04, 0]
        Verbatim: |
          data->AddComponent<SnoozableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::ForgeSprite));

    - Alarm:
        Size: [20, 20, 0]
        Verbatim: |
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::AlarmNeutralSprite));

    - AlarmScrew:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::AlarmScrewSprite));

    - AlarmButton:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<SnoozableComponent>();
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::AlarmButtonNeutralSprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);

# Cleaning mini-game

    - CleaningBroom:
        Size: [3, 3, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::CleaningBroom));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);

    - CleaningWeb:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::CleaningWeb));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);

    - CleaningFire:
        Size: [3, 3, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::CleaningFire));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);

    - CleaningIce:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::CleaningIce));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);

    - CleaningSponge:
        Size: [3, 3, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::CleaningSponge));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);

    - CleaningGoo:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::CleaningGoo));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);

# Lock mini-game

    - LockKey:
        Size: [5, 5, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::LockKeySprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);
    - LockLock:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::LockLockSprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);
    - LockChainBack:
        Size: [20, 20, 0]
        Verbatim: |
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::LockChainBackSprite));
    - LockChainFront:
        Size: [20, 20, 0]
        Verbatim: |
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::LockChainFrontSprite));

# MouseAttack mini-game

    - MouseAttackOpenAlarm:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::MouseAttackOpenAlarmSprite));


    - MouseAttackSmoke:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::MouseAttackSmokeSprite));

    - MouseAttackBbqMouse:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::MouseAttackBbqMouseSprite));

    - MouseAttackWetMouse:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::MouseAttackWetMouseSprite));

    - MouseAttackWaterGlass:
        Size: [5, 5, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::MouseAttackWaterGlassSprite));

# Vermins mini-game

    - VerminEnemy:
        Size: [6.5, 6.5, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::VerminEnemySprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);
