Entity:
  Type: forge::Entity
  Includes:
    - forge/Project.h
    - forge/engine/ecs/Entity.h
    - forge/builtin/rendering/RenderableComponent.h
    - forge/builtin/3Cs/ScreenMappableComponent.h
    - snooze/data/SpriteCatalog.h
    - snooze/data/SoundCatalog.h
    - snooze/ecs/SnoozableComponent.h
    - snooze/ecs/HoverableComponent.h
    - snooze/ecs/SoundClickableComponent.h

  Data:
    - Alarm:
        Size: [20, 20, 0]
        Verbatim: |
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::AlarmNeutralSprite));

    - AlarmScrew:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::AlarmScrewSprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetIsMute(true);
          soundComp.SetOnPressSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Screw));
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Screw));

    - AlarmButton:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<SnoozableComponent>();
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::AlarmButtonNeutralSprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetOnPressSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::SnoozePress));
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::SnoozeRelease));


    - Screwdriver:
        Size: [6.5, 6.5, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::ScrewdriverSprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::TakeObjectCommon));

# Cleaning mini-game

    - CleaningBroom:
        Size: [6.5, 6.5, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::CleaningBroom));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::TakeObjectCommon));

    - CleaningWeb:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::CleaningWeb));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetIsMute(true);
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::CleanCommon));

    - CleaningFire:
        Size: [6.5, 6.5, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::CleaningFire));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::TakeObjectCommon));

    - CleaningIce:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::CleaningIce));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetIsMute(true);
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::CleanCommon));

    - CleaningSponge:
        Size: [6.5, 6.5, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::CleaningSponge));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::TakeObjectCommon));

    - CleaningGoo:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::CleaningGoo));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetIsMute(true);
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::CleanCommon));

# Lock mini-game

    - LockKey:
        Size: [6.5, 6.5, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::LockKeySprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Key));

    - LockLock:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::LockLockSprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetIsMute(true);
          soundComp.SetOnPressSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Lock1));
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Lock2));

    - LockMetalBox:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::LockMetalBoxSprite));

# MouseAttack mini-game

    - MouseAttackOpenAlarm:
        Size: [20, 20, 0]
        Verbatim: |
          //data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::MouseAttackOpenAlarmSprite));
          //auto& soundComp = data->AddComponent<SoundClickableComponent>();
          //soundComp.SetOnPressSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Error));
          //soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Error));

    - MouseAttackSmoke:
        Size: [20, 20, 0]
        Verbatim: |
          //data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::MouseAttackSmokeSprite));
          //auto& soundComp = data->AddComponent<SoundClickableComponent>();
          //soundComp.SetOnPressSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Error));
          //soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Error));

    - MouseAttackBbqMouse:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::MouseAttackBbqMouseSprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetIsMute(true);
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::BBQSplash));

    - MouseAttackWetMouse:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::MouseAttackWetMouseSprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);
          //auto& soundComp = data->AddComponent<SoundClickableComponent>();
          //soundComp.SetOnPressSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Error));
          //soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Error));

    - MouseAttackWaterGlass:
        Size: [6.5, 6.5, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::MouseAttackWaterGlassSprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetOnPressSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Water1));
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Water2));

# Vermins mini-game

    - VerminEnemy:
        Size: [6.5, 6.5, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::VerminEnemySprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetIsMute(true);
          soundComp.SetOnReleaseSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::HitMouse));

# Battery mini-game

    - BatteryContainer:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::BatteryMissingOneSprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetIsMute(true);
          soundComp.SetOnPressSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::Water1));

    - BatteryMouse:
        Size: [20, 20, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::BatteryStealingMouseSprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Cross);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetOnPressSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::HitMouse));

    - BatteryItem:
        Size: [6.5, 6.5, 0]
        Verbatim: |
          data->AddComponent<forge::builtin::ScreenMappableComponent>();
          auto& renderComp = data->AddComponent<forge::builtin::RenderableComponent>();
          renderComp.SetSprite(forge::DataAPI::GetDataFrom<SpriteCatalog>(DataList::Sprite::BatteryItemSprite));
          auto& hoverComp = data->AddComponent<HoverableComponent>();
          hoverComp.SetCursorType(CursorType::Hand);
          auto& soundComp = data->AddComponent<SoundClickableComponent>();
          soundComp.SetOnPressSound(forge::DataAPI::GetDataFrom<SoundCatalog>(DataList::Sound::TakeObjectCommon));
